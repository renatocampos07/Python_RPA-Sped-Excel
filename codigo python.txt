import tkinter as tk
import tkinter.filedialog as fd
import xlsxwriter as xl
import openpyxl
import os
import datetime
import time
import threading


class App:
    def __init__(self, master):
        self.master = master
        self.master.title("Conversor SPED-Excel - por Renato - EY, 2022")

        # Definir data limite para uso do programa
        self.end_date = datetime.date(2024, 10, 31)  # data limite

        # Criar widget Label para exibir informações sobre o autor
        # author_label = tk.Label(self.master, text="Renato - EY, 2022")
        # author_label.pack(side="bottom", padx=10, pady=10)

        # Criar botão para selecionar arquivo TXT
        self.select_button = tk.Button(self.master, text="Converter SPED->Excel", command=self.select_file_txt)
        self.select_button.pack(pady=10)


        # Criar botão para selecionar arquivo Excel
        self.select_excel_button = tk.Button(self.master, text="Converter Excel->SPED", command=self.select_file)
        self.select_excel_button.pack(pady=10)

        # Criar checkbutton para escolher se abre automaticamente o arquivo após a conversão
        self.open_file_var = tk.BooleanVar(value=True)
        self.open_file_checkbutton = tk.Checkbutton(self.master, text="Abrir ao salvar",
                                                    variable=self.open_file_var)
        self.open_file_checkbutton.pack()

        # Criar checkbutton para escolher se inclui fórmula ou não
        self.include_formula_var = tk.BooleanVar()
        self.include_formula_checkbutton = tk.Checkbutton(self.master, text="Incluir fórmula",
                                                          variable=self.include_formula_var)
        self.include_formula_checkbutton.pack()

        # atualiza a janela principal
        #Contador
        self.conversion_label = tk.Label(self.master, text="")
        self.conversion_label.pack(pady=10)
        #self.conversion_label.after(text="Processamento: Escolha a opção")
        self.master.update()

    def select_file_txt(self):
        # Verificar se a data limite já passou
        if datetime.date.today() > self.end_date:
            tk.messagebox.showerror("", "Data limite")
            return

        # Abrir diálogo de seleção de arquivo
        filetypes = (("Arquivos TXT", "*.txt"),)
        filename = fd.askopenfilename(filetypes=filetypes)

        if filename:
            # Converter arquivo TXT para Excel
            threading.Thread(target=self.convert_txt_to_excel_threaded, args=(filename,)).start()

    def convert_txt_to_excel_threaded(self, filename):
        # Definir o texto do rótulo como "Aguarde..."
        self.conversion_label.config(text="Processamento: Aguarde")

        # Realizar a conversão de TXT para Excel usando a função já existente
        self.convert_to_excel(filename)

        # Atualizar o rótulo após a conclusão da conversão
        #self.conversion_label.config(text="Processamento concluído")


    def select_file(self):
        # Verificar se a data limite já passou
        if datetime.date.today() > self.end_date:
            tk.messagebox.showerror("", "Data limite")
            return

        # Abrir diálogo de seleção de arquivo
        filetypes = (("Arquivos Excel", "*.xlsx"),)
        filename = fd.askopenfilename(filetypes=filetypes)

        if filename:
            # Converter arquivo Excel para TXT
            self.convert_to_txt(filename)



    def convert_to_excel(self, filename):
        # Obter tempo de início da conversão
        start_time = time.time()

        # Definir o texto do rótulo como "Aguarde..."
        self.conversion_label.config(text="Processamento: Aguarde")

        # Abrir arquivo TXT e ler as linhas
        with open(filename, 'r', encoding='ISO-8859-1', errors='ignore') as file:
            txt_content = file.read()
        lines = txt_content.splitlines()

        # Criar novo arquivo Excel
        excel_filename = filename[:-4] + "_v1.xlsx"

        # Se o arquivo já existe, perguntar ao usuário se deseja sobrescrevê-lo
        if os.path.exists(excel_filename):
            answer = tk.messagebox.askquestion("Arquivo já existe", "O arquivo já existe. Deseja sobrescrevê-lo?")
            if answer == "no":
                # Se o usuário não deseja sobrescrever, criar um nome padrão para o arquivo
                i = 1
                while os.path.exists(f"{filename[:-4]}_v{i}.xlsx"):
                    i += 1
                excel_filename = f"{filename[:-4]}_v{i}.xlsx"

        wb = xl.Workbook(excel_filename)

        # Ler linhas do arquivo TXT e escrever no arquivo Excel
        for line_num, line in enumerate(lines, start=1):
            try:
                if isinstance(line, bytes):
                    line = line.decode('ISO-8859-1')
            except UnicodeDecodeError as e:
                print(f"Erro ao decodificar linha {line_num}: {e}")
                break
            if line.startswith("|"):  # Verificar se a linha começa com o padrão |XXXX|
                row = line.strip().split("|")
                sheet_name = row[1]

                # Criar nova planilha se ainda não existir
                if not sheet_name in wb.sheetnames:
                    wb.add_worksheet(sheet_name)

                # Definir cabeçalho da planilha
                header = ["ID", "REG"]
                header.extend([f"{num:02d}" for num in range(2, len(row) - 1)])
                worksheet = wb.get_worksheet_by_name(sheet_name)
                worksheet.write_row(0, 0, header)
                worksheet.set_row(0, None, wb.add_format({'bold': True}))

                # Adicionar número de ordem na primeira coluna
                row.insert(1, line_num)

                # Escrever dados na planilha
                worksheet = wb.get_worksheet_by_name(sheet_name)
                if not worksheet.dim_rowmax:
                    row_num = 1
                else:
                    row_num = worksheet.dim_rowmax + 1
                worksheet.write_row(row_num, 0, row[1:] + [' '])

                if self.include_formula_var.get():
                    # Adicionar o cabeçalho "FORMULA" na última coluna
                    worksheet.write(0, worksheet.dim_colmax, "REGPAI")

                    # Adicionar a fórmula na última coluna da linha
                    last_col_letter = chr(ord('A') + worksheet.dim_colmax)
                    formula = f'=_xlfn.HSTACK(' \
                          f'IFERROR(_xlfn.XLOOKUP($A{row_num+1},INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),1,1)&"\'!$A$1:$A$1000"),INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),1,1)&"\'!$A$1:$"&SUBSTITUTE(SUBSTITUTE(ADDRESS(2,MATCH(TRUE,INDEX(_xlfn.ISFORMULA(INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),1,1)&"\'!$A$2:$ZZ$2")),0),0)-1),"$",""),2,"")&"$1000"),,-1),""),' \
                          f'IFERROR(_xlfn.XLOOKUP($A{row_num+1},INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),2,1)&"\'!$A$1:$A$1000"),INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),2,1)&"\'!$A$1:$"&SUBSTITUTE(SUBSTITUTE(ADDRESS(2,MATCH(TRUE,INDEX(_xlfn.ISFORMULA(INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),2,1)&"\'!$A$2:$ZZ$2")),0),0)-1),"$",""),2,"")&"$1000"),,-1),""),' \
                          f'IFERROR(_xlfn.XLOOKUP($A{row_num+1},INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),3,1)&"\'!$A$1:$A$1000"),INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),3,1)&"\'!$A$1:$"&SUBSTITUTE(SUBSTITUTE(ADDRESS(2,MATCH(TRUE,INDEX(_xlfn.ISFORMULA(INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),3,1)&"\'!$A$2:$ZZ$2")),0),0)-1),"$",""),2,"")&"$1000"),,-1),""),' \
                          f'IFERROR(_xlfn.XLOOKUP($A{row_num+1},INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),4,1)&"\'!$A$1:$A$1000"),INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),4,1)&"\'!$A$1:$"&SUBSTITUTE(SUBSTITUTE(ADDRESS(2,MATCH(TRUE,INDEX(_xlfn.ISFORMULA(INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),4,1)&"\'!$A$2:$ZZ$2")),0),0)-1),"$",""),2,"")&"$1000"),,-1),""),' \
                          f'IFERROR(_xlfn.XLOOKUP($A{row_num+1},INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),5,1)&"\'!$A$1:$A$1000"),INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),5,1)&"\'!$A$1:$"&SUBSTITUTE(SUBSTITUTE(ADDRESS(2,MATCH(TRUE,INDEX(_xlfn.ISFORMULA(INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),5,1)&"\'!$A$2:$ZZ$2")),0),0)-1),"$",""),2,"")&"$1000"),,-1),""),' \
                          f'IFERROR(_xlfn.XLOOKUP($A{row_num+1},INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),6,1)&"\'!$A$1:$A$1000"),INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),6,1)&"\'!$A$1:$"&SUBSTITUTE(SUBSTITUTE(ADDRESS(2,MATCH(TRUE,INDEX(_xlfn.ISFORMULA(INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),6,1)&"\'!$A$2:$ZZ$2")),0),0)-1),"$",""),2,"")&"$1000"),,-1),""),' \
                          f'IFERROR(_xlfn.XLOOKUP($A{row_num+1},INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),7,1)&"\'!$A$1:$A$1000"),INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),7,1)&"\'!$A$1:$"&SUBSTITUTE(SUBSTITUTE(ADDRESS(2,MATCH(TRUE,INDEX(_xlfn.ISFORMULA(INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),7,1)&"\'!$A$2:$ZZ$2")),0),0)-1),"$",""),2,"")&"$1000"),,-1),""),' \
                          f'IFERROR(_xlfn.XLOOKUP($A{row_num+1},INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),8,1)&"\'!$A$1:$A$1000"),INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),8,1)&"\'!$A$1:$"&SUBSTITUTE(SUBSTITUTE(ADDRESS(2,MATCH(TRUE,INDEX(_xlfn.ISFORMULA(INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),8,1)&"\'!$A$2:$ZZ$2")),0),0)-1),"$",""),2,"")&"$1000"),,-1),""),' \
                          f'IFERROR(_xlfn.XLOOKUP($A{row_num+1},INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),9,1)&"\'!$A$1:$A$1000"),INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),9,1)&"\'!$A$1:$"&SUBSTITUTE(SUBSTITUTE(ADDRESS(2,MATCH(TRUE,INDEX(_xlfn.ISFORMULA(INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),9,1)&"\'!$A$2:$ZZ$2")),0),0)-1),"$",""),2,"")&"$1000"),,-1),""),' \
                          f'IFERROR(_xlfn.XLOOKUP($A{row_num+1},INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),10,1)&"\'!$A$1:$A$1000"),INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),10,1)&"\'!$A$1:$"&SUBSTITUTE(SUBSTITUTE(ADDRESS(2,MATCH(TRUE,INDEX(_xlfn.ISFORMULA(INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),10,1)&"\'!$A$2:$ZZ$2")),0),0)-1),"$",""),2,"")&"$1000"),,-1),""),' \
                          f'IFERROR(_xlfn.XLOOKUP($A{row_num+1},INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),11,1)&"\'!$A$1:$A$1000"),INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),11,1)&"\'!$A$1:$"&SUBSTITUTE(SUBSTITUTE(ADDRESS(2,MATCH(TRUE,INDEX(_xlfn.ISFORMULA(INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),11,1)&"\'!$A$2:$ZZ$2")),0),0)-1),"$",""),2,"")&"$1000"),,-1),""),' \
                          f'IFERROR(_xlfn.XLOOKUP($A{row_num+1},INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),12,1)&"\'!$A$1:$A$1000"),INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),12,1)&"\'!$A$1:$"&SUBSTITUTE(SUBSTITUTE(ADDRESS(2,MATCH(TRUE,INDEX(_xlfn.ISFORMULA(INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),12,1)&"\'!$A$2:$ZZ$2")),0),0)-1),"$",""),2,"")&"$1000"),,-1),""),' \
                          f'IFERROR(_xlfn.XLOOKUP($A{row_num+1},INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),13,1)&"\'!$A$1:$A$1000"),INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),13,1)&"\'!$A$1:$"&SUBSTITUTE(SUBSTITUTE(ADDRESS(2,MATCH(TRUE,INDEX(_xlfn.ISFORMULA(INDIRECT("\'"&INDEX(_xlfn._xlws.SORT(_xlfn._xlws.FILTER(\'9900\'!$C$2:$C$200,(LEFT($B$2)=LEFT(\'9900\'!$C$2:$C$200))*($B$2>\'9900\'!$C$2:$C$200)),,-1),13,1)&"\'!$A$2:$ZZ$2")),0),0)-1),"$",""),2,"")&"$1000"),,-1),""))'
                    worksheet.write_formula(row_num, worksheet.dim_colmax, formula)

                # Definir largura da coluna e ajustar ao tamanho do conteúdo
                worksheet.autofilter(0, 0, 1, 1000)
                worksheet.set_column(0, 1000, 8.43)
                worksheet.autofit()

        # Obter tempo de término da conversão
        end_time = time.time()

        # Calcular tempo total de conversão em segundos
        conversion_time = end_time - start_time

        # Atualizar o rótulo com o tempo de conversão formatado
        self.conversion_label.config(text=f"Processamento: {conversion_time:.2f} seg")



        # Salvar arquivo Excel
        wb.close()

        if self.open_file_var.get():
            # Abrir arquivo Excel após conversão
            os.startfile(excel_filename)

    def convert_to_txt(self, filename):
        # Carregar arquivo Excel
        wb = openpyxl.load_workbook(filename, read_only=True)

        # Criar novo arquivo TXT
        txt_filename = filename[:-5] + ".txt"
        txt_file = open(txt_filename, 'w')

        # Criar lista para armazenar as linhas da planilha
        rows = []

        # Converter cada planilha para TXT
        for sheet_name in wb.sheetnames:
            worksheet = wb[sheet_name]
            for row in worksheet.iter_rows(min_row=2, values_only=True):
                # Substituir valor None por string vazia
                row = ['' if cell is None else cell for cell in row]
                # Adicionar a linha à lista
                rows.append(row)

        # Ordenar as linhas pelo conteúdo da primeira coluna
        sorted_rows = sorted(rows, key=lambda x: x[0])

        with open(txt_filename, 'w', encoding='ISO-8859-1') as txt_file:
            # Escrever cada linha ordenada no arquivo TXT
            for row in sorted_rows:
                txt_file.write("|" + "|".join(str(cell) for cell in row[1:-2]) + "|\n")

        # Feche o arquivo de texto
        txt_file.close()

        if self.open_file_var.get():
            # Abrir arquivo TXT após conversão
            os.startfile(txt_filename)


root = tk.Tk()
app = App(root)
root.mainloop()